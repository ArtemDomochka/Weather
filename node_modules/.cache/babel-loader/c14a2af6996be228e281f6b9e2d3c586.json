{"ast":null,"code":"var _jsxFileName = \"/home/alucard/VSProjects/weather/src/components/WeatherBoard.js\";\nimport React from 'react';\nimport styles from \"./WeatherBoard.module.css\";\nimport HoursBar from './HoursBar';\nimport MainBoard from './MainBoard';\nimport DaysBar from './DaysBar';\n\nclass WeatherBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayClick = dayIndex => {\n      this.setState({\n        activeBoard: \"daily\",\n        activeDay: dayIndex\n      });\n    };\n\n    this.refactorHourlyForecast = () => {\n      const forecast = this.state.forecast;\n      const hourlyForecast = forecast.hourly;\n      const currentHour = new Date(hourlyForecast[0].dt * 1000).getHours();\n      const today = [];\n      const marker = currentHour;\n\n      for (let i = 0; i < 24; i++) {\n        if (i < marker) {\n          today.push(null);\n        } else {\n          today.push(hourlyForecast[i - currentHour]);\n        }\n      }\n\n      console.log(today);\n      const tomorrow = [];\n      marker;\n\n      for (let i = 0; i < 24; i++) {\n        tomorrow.push(hourlyForecast[currentHour + i]);\n      }\n\n      const afterDay = [];\n\n      for (let i = 0; i < 24; i++) {\n        if (i < 24 - (24 - currentHour)) {\n          afterDay.push(hourlyForecast[24 - 17 + 24 + i]);\n        } else {\n          afterDay.push(null);\n        }\n      }\n    };\n\n    this.state = {\n      isLoaded: false,\n      isHourlyReady: false,\n      activeBoard: \"current\",\n      activeDay: 0,\n      activeHour: 0,\n      forecast: null\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const lat = '48.450001';\n      const lon = '34.983334';\n      const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely&appid=28fac3f57b86f68e027fe7277b3bf432`;\n      let response = await fetch(url);\n\n      if (response.ok) {\n        const forecast = await response.json();\n        this.setState({\n          forecast: forecast,\n          isLoaded: true\n        });\n        this.refactorHourlyForecast();\n      } else {\n        console.log(Error);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return this.state.isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.WeatherBoard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MainBoard, {\n      forecast: this.state.forecast,\n      activeBoard: this.state.activeBoard,\n      activeDay: this.state.activeDay,\n      activeHour: this.state.activeHour,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(HoursBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(DaysBar, {\n      days: this.state.forecast.daily,\n      onDayClick: this.handleDayClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, \"loading forecast\");\n  }\n\n}\n\nexport default WeatherBoard;","map":{"version":3,"sources":["/home/alucard/VSProjects/weather/src/components/WeatherBoard.js"],"names":["React","styles","HoursBar","MainBoard","DaysBar","WeatherBoard","Component","constructor","props","handleDayClick","dayIndex","setState","activeBoard","activeDay","refactorHourlyForecast","forecast","state","hourlyForecast","hourly","currentHour","Date","dt","getHours","today","marker","i","push","console","log","tomorrow","afterDay","isLoaded","isHourlyReady","activeHour","componentDidMount","lat","lon","url","response","fetch","ok","json","Error","e","render","daily"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styles from \"./WeatherBoard.module.css\"\nimport HoursBar from './HoursBar'\nimport MainBoard from './MainBoard'\nimport DaysBar from './DaysBar'\n\nclass WeatherBoard extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            isLoaded : false,\n            isHourlyReady: false,\n            activeBoard : \"current\",\n            activeDay : 0,\n            activeHour : 0,\n            forecast : null\n        }\n    }\n\n    async componentDidMount(){\n        try{\n            const lat = '48.450001'\n            const lon = '34.983334'\n            const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely&appid=28fac3f57b86f68e027fe7277b3bf432`\n            let response = await fetch(url)\n            if(response.ok){\n                const forecast = await response.json()\n                this.setState({\n                    forecast : forecast,\n                    isLoaded : true, \n                })\n\n                this.refactorHourlyForecast()\n\n            }else{\n                console.log(Error);\n            }\n\n        }catch(e){\n            console.log(e);\n        }\n    }\n\n    handleDayClick = dayIndex => {\n        this.setState({\n            activeBoard:\"daily\",\n            activeDay:dayIndex\n        })\n    }\n\n    refactorHourlyForecast = () => {\n        const forecast = this.state.forecast\n        const hourlyForecast = forecast.hourly\n\n        const currentHour = new Date(hourlyForecast[0].dt * 1000).getHours()\n\n        const today = []\n\n        const marker = currentHour\n        for(let i = 0; i < 24; i++){\n            if(i < marker){\n                today.push(null)\n            }else{\n                today.push(hourlyForecast[i - currentHour])\n            }\n        }\n        console.log(today);\n\n        const tomorrow = []\n\n        marker\n        for(let i = 0; i < 24; i++){\n            tomorrow.push(hourlyForecast[currentHour + i])\n        }\n\n        const afterDay = []\n\n        for(let i = 0; i < 24; i++){\n            if(i < 24 - (24 - currentHour)){\n                afterDay.push(hourlyForecast[24 - 17 + 24 + i])\n            }else{\n                afterDay.push(null)\n            }\n            \n        }\n\n\n    }\n\n    render(){\n        return(\n            this.state.isLoaded\n            ? <div className={styles.WeatherBoard}>\n                <MainBoard\n                    forecast={this.state.forecast}\n                    activeBoard={this.state.activeBoard}\n                    activeDay={this.state.activeDay}\n                    activeHour={this.state.activeHour}\n                />\n                <HoursBar/>\n                <DaysBar\n                    days={this.state.forecast.daily}\n                    onDayClick={this.handleDayClick}\n                />\n            </div> \n            : <p>loading forecast</p>\n        )\n    }\n\n}\n\nexport default WeatherBoard\n"]},"metadata":{},"sourceType":"module"}
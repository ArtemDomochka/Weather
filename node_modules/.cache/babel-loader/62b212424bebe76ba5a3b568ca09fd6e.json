{"ast":null,"code":"var _jsxFileName = \"/home/alucard/VSProjects/weather/src/components/WeatherBoard.js\";\nimport React from 'react';\nimport styles from \"./WeatherBoard.module.css\";\nimport HoursBar from './HoursBar';\nimport MainBoard from './MainBoard';\nimport DaysBar from './DaysBar';\n\nclass WeatherBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDayClick = dayIndex => {\n      let isHourlyRequired;\n\n      if (dayIndex === 0 || dayIndex === 1 || dayIndex === 2) {\n        isHourlyRequired = true;\n      } else {\n        isHourlyRequired = false;\n      }\n\n      this.setState({\n        activeBoard: \"daily\",\n        activeDay: dayIndex,\n        isHourlyRequired: isHourlyRequired\n      });\n    };\n\n    this.handleHourClick = (forecastType, activeDay) => {\n      this.setState({\n        activeBoard: \"hourly\"\n      });\n    };\n\n    this.refactorHourlyForecast = () => {\n      const forecast = this.state.forecast;\n      const hourlyForecast = forecast.hourly;\n      const currentHour = new Date(hourlyForecast[0].dt * 1000).getHours();\n      const today = [];\n\n      for (let i = 0; i < 24; i++) {\n        if (i < currentHour) {\n          today.push(null);\n        } else {\n          today.push(hourlyForecast[i - currentHour]);\n        }\n      }\n\n      const tomorrow = [];\n\n      for (let i = 0; i < 24; i++) {\n        tomorrow.push(hourlyForecast[24 - currentHour + i]);\n      }\n\n      const afterDay = [];\n\n      for (let i = 0; i < 24; i++) {\n        if (i < 24 - (24 - currentHour)) {\n          afterDay.push(hourlyForecast[24 + 24 - currentHour + i]);\n        } else {\n          afterDay.push(null);\n        }\n      }\n\n      forecast.hourly = {\n        today: today,\n        tomorrow: tomorrow,\n        afterDay: afterDay\n      };\n      this.setState({\n        forecast: forecast,\n        isHourlyReady: true\n      });\n    };\n\n    this.state = {\n      isLoaded: false,\n      isHourlyReady: false,\n      isHourlyRequired: true,\n      activeBoard: \"current\",\n      activeDay: 0,\n      hourlyForecastType: null,\n      activeHour: 0,\n      forecast: null\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const lat = '48.450001';\n      const lon = '34.983334';\n      const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely&appid=28fac3f57b86f68e027fe7277b3bf432`;\n      let response = await fetch(url);\n\n      if (response.ok) {\n        const forecast = await response.json();\n        this.setState({\n          forecast: forecast,\n          isLoaded: true\n        });\n        this.refactorHourlyForecast();\n      } else {\n        console.log(Error);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return this.state.isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.WeatherBoard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MainBoard, {\n      forecast: this.state.forecast,\n      activeBoard: this.state.activeBoard,\n      activeDay: this.state.activeDay,\n      activeHour: this.state.activeHour,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }), this.state.isHourlyReady && this.state.isHourlyRequired ? /*#__PURE__*/React.createElement(HoursBar, {\n      forecast: this.state.forecast,\n      activeDay: this.state.activeDay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 23\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.HoursBarHidden,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 26\n      }\n    }, \"Hourly forecast is not avaible\")), /*#__PURE__*/React.createElement(DaysBar, {\n      days: this.state.forecast.daily,\n      onDayClick: this.handleDayClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, \"loading forecast\");\n  }\n\n}\n\nexport default WeatherBoard;","map":{"version":3,"sources":["/home/alucard/VSProjects/weather/src/components/WeatherBoard.js"],"names":["React","styles","HoursBar","MainBoard","DaysBar","WeatherBoard","Component","constructor","props","handleDayClick","dayIndex","isHourlyRequired","setState","activeBoard","activeDay","handleHourClick","forecastType","refactorHourlyForecast","forecast","state","hourlyForecast","hourly","currentHour","Date","dt","getHours","today","i","push","tomorrow","afterDay","isHourlyReady","isLoaded","hourlyForecastType","activeHour","componentDidMount","lat","lon","url","response","fetch","ok","json","console","log","Error","e","render","HoursBarHidden","daily"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA0C;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAsClBC,cAtCkB,GAsCDC,QAAQ,IAAI;AACzB,UAAIC,gBAAJ;;AACA,UAAGD,QAAQ,KAAK,CAAb,IAAkBA,QAAQ,KAAK,CAA/B,IAAoCA,QAAQ,KAAK,CAApD,EAAsD;AAClDC,QAAAA,gBAAgB,GAAG,IAAnB;AACH,OAFD,MAEK;AACDA,QAAAA,gBAAgB,GAAG,KAAnB;AACH;;AAED,WAAKC,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAC,OADF;AAEVC,QAAAA,SAAS,EAACJ,QAFA;AAGVC,QAAAA,gBAAgB,EAAEA;AAHR,OAAd;AAKH,KAnDiB;;AAAA,SAqDlBI,eArDkB,GAqDA,CAACC,YAAD,EAAeF,SAAf,KAA6B;AAC3C,WAAKF,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAC;AADF,OAAd;AAGH,KAzDiB;;AAAA,SA2DlBI,sBA3DkB,GA2DO,MAAM;AAC3B,YAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWD,QAA5B;AACA,YAAME,cAAc,GAAGF,QAAQ,CAACG,MAAhC;AAEA,YAAMC,WAAW,GAAG,IAAIC,IAAJ,CAASH,cAAc,CAAC,CAAD,CAAd,CAAkBI,EAAlB,GAAuB,IAAhC,EAAsCC,QAAtC,EAApB;AAEA,YAAMC,KAAK,GAAG,EAAd;;AAEA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,YAAGA,CAAC,GAAGL,WAAP,EAAmB;AACfI,UAAAA,KAAK,CAACE,IAAN,CAAW,IAAX;AACH,SAFD,MAEK;AACDF,UAAAA,KAAK,CAACE,IAAN,CAAWR,cAAc,CAACO,CAAC,GAAGL,WAAL,CAAzB;AACH;AACJ;;AAED,YAAMO,QAAQ,GAAG,EAAjB;;AAEA,WAAI,IAAIF,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBE,QAAAA,QAAQ,CAACD,IAAT,CAAcR,cAAc,CAAC,KAAKE,WAAL,GAAmBK,CAApB,CAA5B;AACH;;AAED,YAAMG,QAAQ,GAAG,EAAjB;;AAEA,WAAI,IAAIH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,EAAxB,EAA2B;AACvB,YAAGA,CAAC,GAAG,MAAM,KAAKL,WAAX,CAAP,EAA+B;AAC3BQ,UAAAA,QAAQ,CAACF,IAAT,CAAcR,cAAc,CAAC,KAAK,EAAL,GAAUE,WAAV,GAAwBK,CAAzB,CAA5B;AACH,SAFD,MAEK;AACDG,UAAAA,QAAQ,CAACF,IAAT,CAAc,IAAd;AACH;AAEJ;;AAEDV,MAAAA,QAAQ,CAACG,MAAT,GAAkB;AACdK,QAAAA,KAAK,EAAEA,KADO;AAEdG,QAAAA,QAAQ,EAAEA,QAFI;AAGdC,QAAAA,QAAQ,EAAEA;AAHI,OAAlB;AAMA,WAAKlB,QAAL,CAAc;AACVM,QAAAA,QAAQ,EAAEA,QADA;AAEVa,QAAAA,aAAa,EAAG;AAFN,OAAd;AAKH,KAvGiB;;AAEd,SAAKZ,KAAL,GAAa;AACTa,MAAAA,QAAQ,EAAG,KADF;AAETD,MAAAA,aAAa,EAAE,KAFN;AAGTpB,MAAAA,gBAAgB,EAAG,IAHV;AAITE,MAAAA,WAAW,EAAG,SAJL;AAKTC,MAAAA,SAAS,EAAG,CALH;AAMTmB,MAAAA,kBAAkB,EAAE,IANX;AAOTC,MAAAA,UAAU,EAAG,CAPJ;AAQThB,MAAAA,QAAQ,EAAG;AARF,KAAb;AAUH;;AAED,QAAMiB,iBAAN,GAAyB;AACrB,QAAG;AACC,YAAMC,GAAG,GAAG,WAAZ;AACA,YAAMC,GAAG,GAAG,WAAZ;AACA,YAAMC,GAAG,GAAI,uDAAsDF,GAAI,QAAOC,GAAI,uEAAlF;AACA,UAAIE,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA1B;;AACA,UAAGC,QAAQ,CAACE,EAAZ,EAAe;AACX,cAAMvB,QAAQ,GAAG,MAAMqB,QAAQ,CAACG,IAAT,EAAvB;AACA,aAAK9B,QAAL,CAAc;AACVM,UAAAA,QAAQ,EAAGA,QADD;AAEVc,UAAAA,QAAQ,EAAG;AAFD,SAAd;AAKA,aAAKf,sBAAL;AAEH,OATD,MASK;AACD0B,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AAEJ,KAlBD,CAkBC,OAAMC,CAAN,EAAQ;AACLH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH;AACJ;;AAqEDC,EAAAA,MAAM,GAAE;AACJ,WACI,KAAK5B,KAAL,CAAWa,QAAX,gBACE;AAAK,MAAA,SAAS,EAAE/B,MAAM,CAACI,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACI,MAAA,QAAQ,EAAE,KAAKc,KAAL,CAAWD,QADzB;AAEI,MAAA,WAAW,EAAE,KAAKC,KAAL,CAAWN,WAF5B;AAGI,MAAA,SAAS,EAAE,KAAKM,KAAL,CAAWL,SAH1B;AAII,MAAA,UAAU,EAAE,KAAKK,KAAL,CAAWe,UAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQM,KAAKf,KAAL,CAAWY,aAAX,IAA4B,KAAKZ,KAAL,CAAWR,gBAAvC,gBACE,oBAAC,QAAD;AACE,MAAA,QAAQ,EAAE,KAAKQ,KAAL,CAAWD,QADvB;AAEE,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWL,SAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,gBAKG;AAAK,MAAA,SAAS,EAAEb,MAAM,CAAC+C,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,CAbT,eAiBE,oBAAC,OAAD;AACI,MAAA,IAAI,EAAE,KAAK7B,KAAL,CAAWD,QAAX,CAAoB+B,KAD9B;AAEI,MAAA,UAAU,EAAE,KAAKxC,cAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CADF,gBAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAxBN;AA0BH;;AArIqC;;AAyI1C,eAAeJ,YAAf","sourcesContent":["import React from 'react'\nimport styles from \"./WeatherBoard.module.css\"\nimport HoursBar from './HoursBar'\nimport MainBoard from './MainBoard'\nimport DaysBar from './DaysBar'\n\nclass WeatherBoard extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            isLoaded : false,\n            isHourlyReady: false,\n            isHourlyRequired : true,\n            activeBoard : \"current\",\n            activeDay : 0,\n            hourlyForecastType: null,\n            activeHour : 0,\n            forecast : null\n        }\n    }\n\n    async componentDidMount(){\n        try{\n            const lat = '48.450001'\n            const lon = '34.983334'\n            const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=minutely&appid=28fac3f57b86f68e027fe7277b3bf432`\n            let response = await fetch(url)\n            if(response.ok){\n                const forecast = await response.json()\n                this.setState({\n                    forecast : forecast,\n                    isLoaded : true, \n                })\n\n                this.refactorHourlyForecast()\n\n            }else{\n                console.log(Error);\n            }\n\n        }catch(e){\n            console.log(e);\n        }\n    }\n\n    handleDayClick = dayIndex => {\n        let isHourlyRequired\n        if(dayIndex === 0 || dayIndex === 1 || dayIndex === 2){\n            isHourlyRequired = true\n        }else{\n            isHourlyRequired = false\n        }\n\n        this.setState({\n            activeBoard:\"daily\",\n            activeDay:dayIndex,\n            isHourlyRequired: isHourlyRequired\n        })\n    }\n\n    handleHourClick = (forecastType, activeDay) => {\n        this.setState({\n            activeBoard:\"hourly\"\n        })\n    }\n\n    refactorHourlyForecast = () => {\n        const forecast = this.state.forecast\n        const hourlyForecast = forecast.hourly\n\n        const currentHour = new Date(hourlyForecast[0].dt * 1000).getHours()\n\n        const today = []\n\n        for(let i = 0; i < 24; i++){\n            if(i < currentHour){\n                today.push(null)\n            }else{\n                today.push(hourlyForecast[i - currentHour])\n            }\n        }\n\n        const tomorrow = []\n\n        for(let i = 0; i < 24; i++){\n            tomorrow.push(hourlyForecast[24 - currentHour + i])\n        }\n\n        const afterDay = []\n\n        for(let i = 0; i < 24; i++){\n            if(i < 24 - (24 - currentHour)){\n                afterDay.push(hourlyForecast[24 + 24 - currentHour + i])\n            }else{\n                afterDay.push(null)\n            }\n            \n        }\n\n        forecast.hourly = {\n            today: today,\n            tomorrow: tomorrow,\n            afterDay: afterDay\n        }\n\n        this.setState({\n            forecast: forecast,\n            isHourlyReady : true\n        })\n\n    }\n\n    render(){\n        return(\n            this.state.isLoaded\n            ? <div className={styles.WeatherBoard}>\n                <MainBoard\n                    forecast={this.state.forecast}\n                    activeBoard={this.state.activeBoard}\n                    activeDay={this.state.activeDay}\n                    activeHour={this.state.activeHour}\n                />\n                {\n                    this.state.isHourlyReady && this.state.isHourlyRequired\n                    ? <HoursBar\n                        forecast={this.state.forecast}\n                        activeDay={this.state.activeDay}\n                     />\n                     : <div className={styles.HoursBarHidden}>\n                         <h2>Hourly forecast is not avaible</h2>\n                      </div>\n                }\n                <DaysBar\n                    days={this.state.forecast.daily}\n                    onDayClick={this.handleDayClick}\n                />\n            </div> \n            : <p>loading forecast</p>\n        )\n    }\n\n}\n\nexport default WeatherBoard\n"]},"metadata":{},"sourceType":"module"}